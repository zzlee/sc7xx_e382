#*****************************************************************************************
# Vivado (TM) v2024.2 (64-bit)
#
# sc7xx.tcl: Tcl script for re-creating project 'sc7xx'
#
# Generated by Vivado on Wed Sep 03 09:31:38 CST 2025
# IP Build 5239520 on Sun Nov 10 16:12:51 MST 2024
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (sc7xx.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "/home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/sources_1/new/user_intr.v"
#    "/home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/sources_1/new/zzlab_env_ctrl.v"
#    "/home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/sources_1/new/generic_ctrl.v"
#    "/home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/sources_1/new/axis_src.v"
#    "/home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/sources_1/new/axis_sink.v"
#    "/home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/sources_1/new/sc7xx_top.v"
#    "/home/zzlee/sc7xx_e382/sc7xx/archive_project_summary.txt"
#    "/home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/constrs_1/new/sc7xx.xdc"
#    "/home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/sim_1/new/tb_fifo_0.v"
#    "/home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/utils_1/imports/synth_1/sc7xx_bd.dcp"
#
# 3. The following remote source files that were added to the original project:-
#
#    <none>
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
 "[file normalize "$origin_dir/sc7xx/sc7xx.srcs/sources_1/new/user_intr.v"]"\
 "[file normalize "$origin_dir/sc7xx/sc7xx.srcs/sources_1/new/zzlab_env_ctrl.v"]"\
 "[file normalize "$origin_dir/sc7xx/sc7xx.srcs/sources_1/new/generic_ctrl.v"]"\
 "[file normalize "$origin_dir/sc7xx/sc7xx.srcs/sources_1/new/axis_src.v"]"\
 "[file normalize "$origin_dir/sc7xx/sc7xx.srcs/sources_1/new/axis_sink.v"]"\
 "[file normalize "$origin_dir/sc7xx/sc7xx.srcs/sources_1/new/sc7xx_top.v"]"\
 "[file normalize "$origin_dir/sc7xx/archive_project_summary.txt"]"\
 "[file normalize "$origin_dir/sc7xx/sc7xx.srcs/constrs_1/new/sc7xx.xdc"]"\
 "[file normalize "$origin_dir/sc7xx/sc7xx.srcs/sim_1/new/tb_fifo_0.v"]"\
 "[file normalize "$origin_dir/sc7xx/sc7xx.srcs/utils_1/imports/synth_1/sc7xx_bd.dcp"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find local file $ifile "
      set status false
    }
  }

  set paths [list \
 "[file normalize "$origin_dir/../[file normalize "$origin_dir/sc7xx/sc7xx.ipdefs/vitis_hls-dev"]"]"\
  ]
  foreach ipath $paths {
    if { ![file isdirectory $ipath] } {
      puts " Could not access $ipath "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "sc7xx"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "sc7xx.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/sc7xx"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7a50tcsg325-2

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Reconstruct message rules
# None

# Set project properties
set obj [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_resource_estimation" -value "0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xc7a50tcsg325-2" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "sim_compile_state" -value "1" -objects $obj
set_property -name "use_inline_hdl_ip" -value "1" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "15" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "15" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "15" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "15" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "15" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "3" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
if { $obj != {} } {
   set_property "ip_repo_paths" "[file normalize "$origin_dir/sc7xx/sc7xx.ipdefs/vitis_hls-dev"]" $obj

   # Rebuild user ip_repo's index before adding any source files
   update_ip_catalog -rebuild
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/sc7xx/sc7xx.srcs/sources_1/new/user_intr.v" ]\
 [file normalize "${origin_dir}/sc7xx/sc7xx.srcs/sources_1/new/zzlab_env_ctrl.v" ]\
 [file normalize "${origin_dir}/sc7xx/sc7xx.srcs/sources_1/new/generic_ctrl.v" ]\
 [file normalize "${origin_dir}/sc7xx/sc7xx.srcs/sources_1/new/axis_src.v" ]\
 [file normalize "${origin_dir}/sc7xx/sc7xx.srcs/sources_1/new/axis_sink.v" ]\
 [file normalize "${origin_dir}/sc7xx/sc7xx.srcs/sources_1/new/sc7xx_top.v" ]\
 [file normalize "${origin_dir}/sc7xx/archive_project_summary.txt" ]\
]
set imported_files ""
foreach f $files {
  lappend imported_files [import_files -fileset sources_1 $f]
}

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "new/sc7xx_top.v"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj


# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "dataflow_viewer_settings" -value "min_width=16" -objects $obj
set_property -name "top" -value "sc7xx_top" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/sc7xx/sc7xx.srcs/constrs_1/new/sc7xx.xdc"]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "new/sc7xx.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_part" -value "xc7a50tcsg325-2" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/sc7xx/sc7xx.srcs/sim_1/new/tb_fifo_0.v" ]\
]
set imported_files ""
foreach f $files {
  lappend imported_files [import_files -fileset sim_1 $f]
}

# Set 'sim_1' fileset file properties for remote files
# None

# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "sim_wrapper_top" -value "1" -objects $obj
set_property -name "top" -value "sc7xx_top" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/sc7xx/sc7xx.srcs/utils_1/imports/synth_1/sc7xx_bd.dcp" ]\
]
set imported_files ""
foreach f $files {
  lappend imported_files [import_files -fileset utils_1 $f]
}

# Set 'utils_1' fileset file properties for remote files
# None

# Set 'utils_1' fileset file properties for local files
set file "synth_1/sc7xx_bd.dcp"
set file_obj [get_files -of_objects [get_filesets utils_1] [list "*$file"]]
set_property -name "netlist_only" -value "0" -objects $file_obj


# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added
if { [get_files [list user_intr.v]] == "" } {
  import_files -quiet -fileset sources_1 /home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/sources_1/new/user_intr.v
}
if { [get_files [list zzlab_env_ctrl.v]] == "" } {
  import_files -quiet -fileset sources_1 /home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/sources_1/new/zzlab_env_ctrl.v
}
if { [get_files [list generic_ctrl.v]] == "" } {
  import_files -quiet -fileset sources_1 /home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/sources_1/new/generic_ctrl.v
}
if { [get_files [list axis_src.v]] == "" } {
  import_files -quiet -fileset sources_1 /home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/sources_1/new/axis_src.v
}
if { [get_files [list axis_sink.v]] == "" } {
  import_files -quiet -fileset sources_1 /home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/sources_1/new/axis_sink.v
}
if { [get_files [list generic_ctrl.v]] == "" } {
  import_files -quiet -fileset sources_1 /home/zzlee/sc7xx_e382/sc7xx/sc7xx.srcs/sources_1/new/generic_ctrl.v
}


# Proc to create BD sc7xx
proc cr_bd_sc7xx { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# user_intr, zzlab_env_ctrl, generic_ctrl, axis_src, axis_sink, generic_ctrl



  # CHANGE DESIGN NAME HERE
  set design_name sc7xx

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:proc_sys_reset:5.0\
  xilinx.com:ip:util_ds_buf:2.2\
  xilinx.com:ip:xdma:4.1\
  xilinx.com:ip:system_ila:1.1\
  xilinx.com:ip:xlconcat:2.1\
  xilinx.com:ip:v_tpg:8.2\
  xilinx.com:ip:xlconstant:1.1\
  xilinx.com:ip:axi_bram_ctrl:4.1\
  xilinx.com:ip:blk_mem_gen:8.4\
  xilinx.com:ip:xlslice:1.0\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  user_intr\
  zzlab_env_ctrl\
  generic_ctrl\
  axis_src\
  axis_sink\
  generic_ctrl\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  
# Hierarchical cell: sink_0
proc create_hier_cell_sink_0 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_sink_0() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:axis_rtl:1.0 s_axis

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 s_axi_ctrl


  # Create pins
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -type rst rst_n

  # Create instance: axis_sink_0, and set properties
  set block_name axis_sink
  set block_cell_name axis_sink_0
  if { [catch {set axis_sink_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $axis_sink_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [list \
    CONFIG.C_DATA_WIDTH {128} \
    CONFIG.KEEP_WIDTH {16} \
  ] $axis_sink_0


  # Create instance: generic_ctrl_0, and set properties
  set block_name generic_ctrl
  set block_cell_name generic_ctrl_0
  if { [catch {set generic_ctrl_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $generic_ctrl_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins generic_ctrl_0/s_axi_ctrl] [get_bd_intf_pins s_axi_ctrl]
  connect_bd_intf_net -intf_net xdma_0_M_AXIS_H2C_0 [get_bd_intf_pins s_axis] [get_bd_intf_pins axis_sink_0/s_axis]

  # Create port connections
  connect_bd_net -net Net  [get_bd_pins rst_n] \
  [get_bd_pins axis_sink_0/rst_n] \
  [get_bd_pins generic_ctrl_0/rst_n]
  connect_bd_net -net axi_pcie_0_axi_aclk_out  [get_bd_pins clk] \
  [get_bd_pins axis_sink_0/clk] \
  [get_bd_pins generic_ctrl_0/clk]
  connect_bd_net -net axis_sink_0_ap_done  [get_bd_pins axis_sink_0/ap_done] \
  [get_bd_pins generic_ctrl_0/ap_done]
  connect_bd_net -net axis_sink_0_ap_idle  [get_bd_pins axis_sink_0/ap_idle] \
  [get_bd_pins generic_ctrl_0/ap_idle]
  connect_bd_net -net axis_sink_0_ap_ready  [get_bd_pins axis_sink_0/ap_ready] \
  [get_bd_pins generic_ctrl_0/ap_ready]
  connect_bd_net -net generic_ctrl_0_ap_start  [get_bd_pins generic_ctrl_0/ap_start] \
  [get_bd_pins axis_sink_0/ap_start]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: src_0
proc create_hier_cell_src_0 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_src_0() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 s_axi_ctrl

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:axis_rtl:1.0 m_axis


  # Create pins
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -type rst rst_n

  # Create instance: generic_ctrl_0, and set properties
  set block_name generic_ctrl
  set block_cell_name generic_ctrl_0
  if { [catch {set generic_ctrl_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $generic_ctrl_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: axis_src_0, and set properties
  set block_name axis_src
  set block_cell_name axis_src_0
  if { [catch {set axis_src_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $axis_src_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [list \
    CONFIG.C_DATA_WIDTH {128} \
    CONFIG.KEEP_WIDTH {16} \
  ] $axis_src_0


  # Create interface connections
  connect_bd_intf_net -intf_net axi_interconnect_m_M02_AXI [get_bd_intf_pins s_axi_ctrl] [get_bd_intf_pins generic_ctrl_0/s_axi_ctrl]
  connect_bd_intf_net -intf_net axis_src_0_m_axis [get_bd_intf_pins m_axis] [get_bd_intf_pins axis_src_0/m_axis]

  # Create port connections
  connect_bd_net -net S00_ARESETN_1  [get_bd_pins rst_n] \
  [get_bd_pins axis_src_0/rst_n] \
  [get_bd_pins generic_ctrl_0/rst_n]
  connect_bd_net -net axi_pcie_0_axi_aclk_out  [get_bd_pins clk] \
  [get_bd_pins axis_src_0/clk] \
  [get_bd_pins generic_ctrl_0/clk]
  connect_bd_net -net axis_src_0_ap_done  [get_bd_pins axis_src_0/ap_done] \
  [get_bd_pins generic_ctrl_0/ap_done]
  connect_bd_net -net axis_src_0_ap_idle  [get_bd_pins axis_src_0/ap_idle] \
  [get_bd_pins generic_ctrl_0/ap_idle]
  connect_bd_net -net axis_src_0_ap_ready  [get_bd_pins axis_src_0/ap_ready] \
  [get_bd_pins generic_ctrl_0/ap_ready]
  connect_bd_net -net generic_ctrl_0_ap_start  [get_bd_pins generic_ctrl_0/ap_start] \
  [get_bd_pins axis_src_0/ap_start]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: reset_pins
proc create_hier_cell_reset_pins { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_reset_pins() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 31 -to 0 Din
  create_bd_pin -dir O -from 0 -to 0 Dout
  create_bd_pin -dir O -from 0 -to 0 Dout1
  create_bd_pin -dir O -from 0 -to 0 -type rst Dout2

  # Create instance: reset_0, and set properties
  set reset_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 reset_0 ]

  # Create instance: reset_1, and set properties
  set reset_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 reset_1 ]
  set_property -dict [list \
    CONFIG.DIN_FROM {1} \
    CONFIG.DIN_TO {1} \
  ] $reset_1


  # Create instance: reset_2, and set properties
  set reset_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 reset_2 ]
  set_property CONFIG.DIN_TO {2} $reset_2


  # Create port connections
  connect_bd_net -net Din_1  [get_bd_pins Din] \
  [get_bd_pins reset_0/Din] \
  [get_bd_pins reset_1/Din] \
  [get_bd_pins reset_2/Din]
  connect_bd_net -net reset_0_Dout  [get_bd_pins reset_0/Dout] \
  [get_bd_pins Dout]
  connect_bd_net -net reset_1_Dout  [get_bd_pins reset_1/Dout] \
  [get_bd_pins Dout1]
  connect_bd_net -net reset_2_Dout  [get_bd_pins reset_2/Dout] \
  [get_bd_pins Dout2]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set pcie_clk [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 pcie_clk ]

  set pcie_mgt [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:pcie_7x_mgt_rtl:1.0 pcie_mgt ]


  # Create ports
  set pcie_rst_n [ create_bd_port -dir I -type rst pcie_rst_n ]

  # Create instance: proc_sys_reset_axi, and set properties
  set proc_sys_reset_axi [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 proc_sys_reset_axi ]

  # Create instance: util_ds_buf_0, and set properties
  set util_ds_buf_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf:2.2 util_ds_buf_0 ]
  set_property CONFIG.C_BUF_TYPE {IBUFDSGTE} $util_ds_buf_0


  # Create instance: axi_interconnect_m, and set properties
  set axi_interconnect_m [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_interconnect_m ]
  set_property CONFIG.NUM_MI {5} $axi_interconnect_m


  # Create instance: xdma_0, and set properties
  set xdma_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xdma:4.1 xdma_0 ]
  set_property -dict [list \
    CONFIG.axilite_master_en {true} \
    CONFIG.axist_bypass_en {false} \
    CONFIG.cfg_mgmt_if {false} \
    CONFIG.mode_selection {Advanced} \
    CONFIG.pcie_id_if {false} \
    CONFIG.pciebar2axibar_axil_master {0x44A00000} \
    CONFIG.pf0_Use_Class_Code_Lookup_Assistant {false} \
    CONFIG.pf0_base_class_menu {Multimedia_device} \
    CONFIG.pf0_device_id {E382} \
    CONFIG.pf0_msi_cap_multimsgcap {4_vectors} \
    CONFIG.pf0_msi_enabled {true} \
    CONFIG.pf0_sub_class_interface_menu {Other_multimedia_device} \
    CONFIG.pf0_subsystem_vendor_id {12AB} \
    CONFIG.pl_link_cap_max_link_speed {5.0_GT/s} \
    CONFIG.pl_link_cap_max_link_width {X4} \
    CONFIG.vendor_id {12AB} \
    CONFIG.xdma_axi_intf_mm {AXI_Stream} \
    CONFIG.xdma_axilite_slave {false} \
    CONFIG.xdma_num_usr_irq {4} \
    CONFIG.xdma_rnum_chnl {1} \
    CONFIG.xdma_sts_ports {false} \
  ] $xdma_0


  # Create instance: system_ila_0, and set properties
  set system_ila_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:system_ila:1.1 system_ila_0 ]
  set_property -dict [list \
    CONFIG.C_NUM_MONITOR_SLOTS {2} \
    CONFIG.C_SLOT {1} \
    CONFIG.C_SLOT_0_INTF_TYPE {xilinx.com:interface:axis_rtl:1.0} \
    CONFIG.C_SLOT_1_INTF_TYPE {xilinx.com:interface:axis_rtl:1.0} \
  ] $system_ila_0


  # Create instance: user_intr_0, and set properties
  set block_name user_intr
  set block_cell_name user_intr_0
  if { [catch {set user_intr_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $user_intr_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property CONFIG.INTR_WIDTH {4} $user_intr_0


  # Create instance: zzlab_env_ctrl_0, and set properties
  set block_name zzlab_env_ctrl
  set block_cell_name zzlab_env_ctrl_0
  if { [catch {set zzlab_env_ctrl_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $zzlab_env_ctrl_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [list \
    CONFIG.C_BOARD_VERSION {0x00000001} \
    CONFIG.C_PLATFORM {SC7Q} \
    CONFIG.C_VERSION {0x25090300} \
  ] $zzlab_env_ctrl_0


  # Create instance: intr_map, and set properties
  set intr_map [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 intr_map ]
  set_property CONFIG.NUM_PORTS {4} $intr_map


  # Create instance: v_tpg_0, and set properties
  set v_tpg_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:v_tpg:8.2 v_tpg_0 ]
  set_property -dict [list \
    CONFIG.FOREGROUND {0} \
    CONFIG.SAMPLES_PER_CLOCK {4} \
  ] $v_tpg_0


  # Create instance: reset_pins
  create_hier_cell_reset_pins [current_bd_instance .] reset_pins

  # Create instance: const_not, and set properties
  set const_not [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 const_not ]
  set_property CONFIG.CONST_VAL {0} $const_not


  # Create instance: src_0
  create_hier_cell_src_0 [current_bd_instance .] src_0

  # Create instance: sink_0
  create_hier_cell_sink_0 [current_bd_instance .] sink_0

  # Create instance: intr_0, and set properties
  set intr_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 intr_0 ]
  set_property CONFIG.CONST_VAL {0} $intr_0


  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property CONFIG.PROTOCOL {AXI4LITE} $axi_bram_ctrl_0


  # Create instance: blk_mem_gen_0, and set properties
  set blk_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_0 ]
  set_property -dict [list \
    CONFIG.Algorithm {Minimum_Area} \
    CONFIG.Assume_Synchronous_Clk {false} \
    CONFIG.Memory_Type {True_Dual_Port_RAM} \
    CONFIG.use_bram_block {Stand_Alone} \
  ] $blk_mem_gen_0


  # Create interface connections
  connect_bd_intf_net -intf_net CLK_IN_D_0_1 [get_bd_intf_ports pcie_clk] [get_bd_intf_pins util_ds_buf_0/CLK_IN_D]
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_0/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTB [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTB] [get_bd_intf_pins blk_mem_gen_0/BRAM_PORTB]
  connect_bd_intf_net -intf_net axi_interconnect_m_M00_AXI [get_bd_intf_pins zzlab_env_ctrl_0/s_axi_ctrl] [get_bd_intf_pins axi_interconnect_m/M00_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_m_M01_AXI [get_bd_intf_pins axi_interconnect_m/M01_AXI] [get_bd_intf_pins v_tpg_0/s_axi_CTRL]
  connect_bd_intf_net -intf_net axi_interconnect_m_M02_AXI [get_bd_intf_pins src_0/s_axi_ctrl] [get_bd_intf_pins axi_interconnect_m/M02_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_m_M03_AXI [get_bd_intf_pins axi_interconnect_m/M03_AXI] [get_bd_intf_pins sink_0/s_axi_ctrl]
  connect_bd_intf_net -intf_net axi_interconnect_m_M04_AXI [get_bd_intf_pins axi_bram_ctrl_0/S_AXI] [get_bd_intf_pins axi_interconnect_m/M04_AXI]
  connect_bd_intf_net -intf_net axis_src_0_m_axis [get_bd_intf_pins src_0/m_axis] [get_bd_intf_pins xdma_0/S_AXIS_C2H_0]
connect_bd_intf_net -intf_net [get_bd_intf_nets axis_src_0_m_axis] [get_bd_intf_pins src_0/m_axis] [get_bd_intf_pins system_ila_0/SLOT_0_AXIS]
  connect_bd_intf_net -intf_net xdma_0_M_AXIS_H2C_0 [get_bd_intf_pins sink_0/s_axis] [get_bd_intf_pins xdma_0/M_AXIS_H2C_0]
connect_bd_intf_net -intf_net [get_bd_intf_nets xdma_0_M_AXIS_H2C_0] [get_bd_intf_pins sink_0/s_axis] [get_bd_intf_pins system_ila_0/SLOT_1_AXIS]
  connect_bd_intf_net -intf_net xdma_0_M_AXI_LITE [get_bd_intf_pins xdma_0/M_AXI_LITE] [get_bd_intf_pins axi_interconnect_m/S00_AXI]
  connect_bd_intf_net -intf_net xdma_0_pcie_mgt [get_bd_intf_ports pcie_mgt] [get_bd_intf_pins xdma_0/pcie_mgt]

  # Create port connections
  connect_bd_net -net ARESETN_2  [get_bd_pins proc_sys_reset_axi/interconnect_aresetn] \
  [get_bd_pins axi_interconnect_m/ARESETN] \
  [get_bd_pins axi_interconnect_m/S00_ARESETN] \
  [get_bd_pins axi_interconnect_m/M00_ARESETN] \
  [get_bd_pins axi_interconnect_m/M01_ARESETN] \
  [get_bd_pins axi_interconnect_m/M02_ARESETN] \
  [get_bd_pins axi_interconnect_m/M03_ARESETN] \
  [get_bd_pins axi_interconnect_m/M04_ARESETN]
  connect_bd_net -net S00_ARESETN_1  [get_bd_pins proc_sys_reset_axi/peripheral_aresetn] \
  [get_bd_pins system_ila_0/resetn] \
  [get_bd_pins zzlab_env_ctrl_0/rst_n] \
  [get_bd_pins user_intr_0/ap_rst_n] \
  [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net axi_pcie_0_axi_aclk_out  [get_bd_pins xdma_0/axi_aclk] \
  [get_bd_pins proc_sys_reset_axi/slowest_sync_clk] \
  [get_bd_pins axi_interconnect_m/ACLK] \
  [get_bd_pins axi_interconnect_m/S00_ACLK] \
  [get_bd_pins axi_interconnect_m/M00_ACLK] \
  [get_bd_pins system_ila_0/clk] \
  [get_bd_pins zzlab_env_ctrl_0/clk] \
  [get_bd_pins v_tpg_0/ap_clk] \
  [get_bd_pins axi_interconnect_m/M01_ACLK] \
  [get_bd_pins src_0/clk] \
  [get_bd_pins sink_0/clk] \
  [get_bd_pins axi_interconnect_m/M02_ACLK] \
  [get_bd_pins axi_interconnect_m/M03_ACLK] \
  [get_bd_pins user_intr_0/ap_clk] \
  [get_bd_pins axi_bram_ctrl_0/s_axi_aclk] \
  [get_bd_pins axi_interconnect_m/M04_ACLK]
  connect_bd_net -net intr_0_dout  [get_bd_pins intr_0/dout] \
  [get_bd_pins intr_map/In1] \
  [get_bd_pins intr_map/In2] \
  [get_bd_pins intr_map/In3]
  connect_bd_net -net intr_map_dout  [get_bd_pins intr_map/dout] \
  [get_bd_pins user_intr_0/intr]
  connect_bd_net -net pcie_rst_n_1  [get_bd_ports pcie_rst_n] \
  [get_bd_pins proc_sys_reset_axi/ext_reset_in] \
  [get_bd_pins xdma_0/sys_rst_n]
  connect_bd_net -net proc_sys_reset_axi_peripheral_reset  [get_bd_pins proc_sys_reset_axi/peripheral_reset]
  connect_bd_net -net reset_pins_Dout  [get_bd_pins reset_pins/Dout] \
  [get_bd_pins v_tpg_0/ap_rst_n]
  connect_bd_net -net reset_pins_Dout2  [get_bd_pins reset_pins/Dout2] \
  [get_bd_pins sink_0/rst_n]
  connect_bd_net -net rst_n_1  [get_bd_pins reset_pins/Dout1] \
  [get_bd_pins src_0/rst_n]
  connect_bd_net -net tready_not_dout  [get_bd_pins const_not/dout] \
  [get_bd_pins v_tpg_0/m_axis_video_TREADY]
  connect_bd_net -net user_intr_0_usr_irq_req  [get_bd_pins user_intr_0/usr_irq_req] \
  [get_bd_pins xdma_0/usr_irq_req]
  connect_bd_net -net util_ds_buf_0_IBUF_OUT  [get_bd_pins util_ds_buf_0/IBUF_OUT] \
  [get_bd_pins xdma_0/sys_clk]
  connect_bd_net -net v_tpg_0_interrupt  [get_bd_pins v_tpg_0/interrupt] \
  [get_bd_pins intr_map/In0]
  connect_bd_net -net xdma_0_axi_aresetn  [get_bd_pins xdma_0/axi_aresetn] \
  [get_bd_pins proc_sys_reset_axi/aux_reset_in]
  connect_bd_net -net xdma_0_usr_irq_ack  [get_bd_pins xdma_0/usr_irq_ack] \
  [get_bd_pins user_intr_0/usr_irq_ack]
  connect_bd_net -net zzlab_env_ctrl_0_ap_rst_n  [get_bd_pins zzlab_env_ctrl_0/ap_rst_n] \
  [get_bd_pins reset_pins/Din]

  # Create address segments
  assign_bd_address -offset 0x44A40000 -range 0x00002000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_LITE] [get_bd_addr_segs axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0x44A11000 -range 0x00001000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_LITE] [get_bd_addr_segs sink_0/generic_ctrl_0/s_axi_ctrl/reg0] -force
  assign_bd_address -offset 0x44A10000 -range 0x00001000 -with_name SEG_generic_ctrl_0_reg0_1 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_LITE] [get_bd_addr_segs src_0/generic_ctrl_0/s_axi_ctrl/reg0] -force
  assign_bd_address -offset 0x44A20000 -range 0x00010000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_LITE] [get_bd_addr_segs v_tpg_0/s_axi_CTRL/Reg] -force
  assign_bd_address -offset 0x44A00000 -range 0x00001000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_LITE] [get_bd_addr_segs zzlab_env_ctrl_0/s_axi_ctrl/reg0] -force

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ActiveEmotionalView":"Color Coded",
   "Color Coded_ExpandedHierarchyInLayout":"",
   "Color Coded_Layout":"# # String gsaved with Nlview 7.8.0 2024-04-26 e1825d835c VDI=44 GEI=38 GUI=JA:21.0 TLS
#  -string -flagsOSRD
preplace port pcie_clk -pg 1 -lvl 0 -x 0 -y 910 -defaultsOSRD
preplace port pcie_mgt -pg 1 -lvl 6 -x 1760 -y 780 -defaultsOSRD
preplace port port-id_pcie_rst_n -pg 1 -lvl 0 -x 0 -y 600 -defaultsOSRD
preplace inst proc_sys_reset_axi -pg 1 -lvl 1 -x 210 -y 620 -defaultsOSRD
preplace inst util_ds_buf_0 -pg 1 -lvl 3 -x 980 -y 910 -defaultsOSRD
preplace inst axi_interconnect_m -pg 1 -lvl 2 -x 580 -y 200 -defaultsOSRD
preplace inst xdma_0 -pg 1 -lvl 4 -x 1350 -y 820 -defaultsOSRD
preplace inst system_ila_0 -pg 1 -lvl 5 -x 1640 -y 640 -defaultsOSRD
preplace inst user_intr_0 -pg 1 -lvl 3 -x 980 -y 770 -defaultsOSRD
preplace inst zzlab_env_ctrl_0 -pg 1 -lvl 3 -x 980 -y 90 -defaultsOSRD
preplace inst intr_map -pg 1 -lvl 2 -x 580 -y 780 -defaultsOSRD
preplace inst v_tpg_0 -pg 1 -lvl 3 -x 980 -y 560 -defaultsOSRD
preplace inst reset_pins -pg 1 -lvl 2 -x 580 -y 490 -defaultsOSRD
preplace inst const_not -pg 1 -lvl 4 -x 1350 -y 550 -defaultsOSRD
preplace inst src_0 -pg 1 -lvl 3 -x 980 -y 400 -defaultsOSRD
preplace inst sink_0 -pg 1 -lvl 5 -x 1640 -y 180 -defaultsOSRD
preplace inst intr_0 -pg 1 -lvl 1 -x 210 -y 770 -defaultsOSRD
preplace inst axi_bram_ctrl_0 -pg 1 -lvl 3 -x 980 -y 260 -defaultsOSRD
preplace inst blk_mem_gen_0 -pg 1 -lvl 4 -x 1350 -y 260 -defaultsOSRD
preplace netloc ARESETN_2 1 1 1 400 100n
preplace netloc S00_ARESETN_1 1 1 4 N 660 730 680 NJ 680 1540J
preplace netloc axi_pcie_0_axi_aclk_out 1 0 5 30 400 390 400 750 10 NJ 10 1520
preplace netloc intr_0_dout 1 1 1 390 770n
preplace netloc intr_map_dout 1 2 1 N 780
preplace netloc pcie_rst_n_1 1 0 4 20 520 410J 640 740J 660 1180J
preplace netloc proc_sys_reset_axi_peripheral_reset 1 1 1 N 620
preplace netloc reset_pins_Dout 1 2 1 740 470n
preplace netloc reset_pins_Dout2 1 2 3 780 180 NJ 180 1510J
preplace netloc rst_n_1 1 2 1 790 420n
preplace netloc tready_not_dout 1 3 2 1180J 620 1510
preplace netloc user_intr_0_usr_irq_req 1 3 1 1170 770n
preplace netloc util_ds_buf_0_IBUF_OUT 1 3 1 1190J 810n
preplace netloc v_tpg_0_interrupt 1 1 3 430 670 NJ 670 1170
preplace netloc xdma_0_axi_aresetn 1 0 5 30 990 NJ 990 NJ 990 NJ 990 1530
preplace netloc xdma_0_usr_irq_ack 1 2 3 790 980 NJ 980 1510
preplace netloc zzlab_env_ctrl_0_ap_rst_n 1 1 3 430 410 760J 470 1170
preplace netloc CLK_IN_D_0_1 1 0 3 NJ 910 NJ 910 NJ
preplace netloc axi_interconnect_m_M00_AXI 1 2 1 740 70n
preplace netloc axi_interconnect_m_M01_AXI 1 2 1 770 180n
preplace netloc axi_interconnect_m_M02_AXI 1 2 1 790 200n
preplace netloc axi_interconnect_m_M03_AXI 1 2 3 740 170 NJ 170 NJ
preplace netloc axis_src_0_m_axis 1 3 2 1190 610 NJ
preplace netloc xdma_0_M_AXIS_H2C_0 1 4 1 1530 150n
preplace netloc xdma_0_M_AXI_LITE 1 1 4 420 650 NJ 650 NJ 650 1510
preplace netloc xdma_0_pcie_mgt 1 4 2 NJ 780 NJ
preplace netloc axi_bram_ctrl_0_BRAM_PORTA 1 3 1 N 250
preplace netloc axi_bram_ctrl_0_BRAM_PORTB 1 3 1 N 270
preplace netloc axi_interconnect_m_M04_AXI 1 2 1 N 240
levelinfo -pg 1 0 210 580 980 1350 1640 1760
pagesize -pg 1 -db -bbox -sgen -120 0 1870 1010
",
   "Color Coded_ScaleFactor":"0.496",
   "Color Coded_TopLeft":"-264,0",
   "Default View_ScaleFactor":"0.410596",
   "Default View_TopLeft":"-207,10",
   "ExpandedHierarchyInLayout":"",
   "guistr":"# # String gsaved with Nlview 7.8.0 2024-04-26 e1825d835c VDI=44 GEI=38 GUI=JA:21.0 TLS
#  -string -flagsOSRD
preplace port pcie_mgt -pg 1 -lvl 8 -x 2760 -y 650 -defaultsOSRD
preplace port PCIE -pg 1 -lvl 0 -x -10 -y 1150 -defaultsOSRD
preplace port port-id_pcie_rst_n -pg 1 -lvl 0 -x -10 -y 420 -defaultsOSRD
preplace inst proc_sys_reset_axi -pg 1 -lvl 1 -x 410 -y 440 -defaultsOSRD
preplace inst util_ds_buf_0 -pg 1 -lvl 6 -x 2180 -y 1150 -defaultsOSRD
preplace inst axi_interconnect_m -pg 1 -lvl 2 -x 770 -y 770 -defaultsOSRD
preplace inst zzlab_env_0 -pg 1 -lvl 3 -x 1150 -y 1030 -defaultsOSRD
preplace inst gpout -pg 1 -lvl 2 -x 770 -y 1040 -defaultsOSRD
preplace inst intr_map -pg 1 -lvl 5 -x 1790 -y 1040 -defaultsOSRD
preplace inst aximm_test2_0 -pg 1 -lvl 3 -x 1150 -y 870 -defaultsOSRD
preplace inst axi_pcie_0 -pg 1 -lvl 7 -x 2530 -y 720 -defaultsOSRD
preplace inst pcie_intr_0 -pg 1 -lvl 6 -x 2180 -y 1020 -defaultsOSRD
preplace inst axi_interconnect_s -pg 1 -lvl 6 -x 2180 -y 410 -defaultsOSRD
preplace inst proc_sys_reset_s_ctl -pg 1 -lvl 5 -x 1790 -y 120 -defaultsOSRD
preplace inst axi_interconnect_s_ctl -pg 1 -lvl 6 -x 2180 -y 160 -defaultsOSRD
preplace inst aximm_test0_0 -pg 1 -lvl 5 -x 1790 -y 810 -defaultsOSRD
preplace inst axi_register_slice_0 -pg 1 -lvl 4 -x 1460 -y 700 -defaultsOSRD
preplace inst axi_data_fifo_0 -pg 1 -lvl 5 -x 1790 -y 630 -defaultsOSRD
preplace inst system_ila_0 -pg 1 -lvl 4 -x 1460 -y 460 -defaultsOSRD
preplace netloc ARESETN_2 1 1 5 610 380 NJ 380 NJ 380 NJ 380 N
preplace netloc S00_ARESETN_1 1 1 5 600 560 960 560 NJ 560 1580J 530 2030
preplace netloc axi_pcie_0_axi_aclk_out 1 0 8 220 550 590 610 950 650 1320 610 1600 710 1980 870 NJ 870 2710
preplace netloc axi_pcie_0_axi_ctl_aclk_out 1 4 4 1610 20 2030 40 NJ 40 2740
preplace netloc axi_pcie_0_mmcm_lock 1 0 8 230 540 NJ 540 NJ 540 NJ 540 1600 540 2000J 570 NJ 570 2720
preplace netloc aximm_test0_0_interrupt 1 4 2 1610 890 1970
preplace netloc aximm_test2_0_interrupt 1 3 2 NJ 880 1580
preplace netloc gpout_Dout 1 2 4 970J 950 NJ 950 NJ 950 1970
preplace netloc gpout_Dout1 1 2 3 920 720 1330 620 1580
preplace netloc gpout_Dout2 1 2 3 980J 780 NJ 780 1580
preplace netloc intr_map_dout 1 5 1 N 1040
preplace netloc pcie_intr_0_intr_num 1 6 1 2340 750n
preplace netloc pcie_intr_0_intr_vec_req 1 6 1 2330 730n
preplace netloc pcie_rst_n_1 1 0 7 210 340 NJ 340 NJ 340 NJ 340 1610 370 2010J 710 NJ
preplace netloc proc_sys_reset_axi_peripheral_reset 1 1 1 N 440
preplace netloc proc_sys_reset_s_ctl_interconnect_aresetn 1 5 1 N 140
preplace netloc proc_sys_reset_s_ctl_peripheral_aresetn 1 5 1 1970 160n
preplace netloc util_ds_buf_0_IBUF_OUT 1 6 1 2350J 770n
preplace netloc zzlab_env_0_gpout 1 1 3 620 1110 NJ 1110 1320
preplace netloc zzlab_env_0_intr 1 3 2 N 1040 NJ
preplace netloc CLK_IN_D_0_1 1 0 6 NJ 1150 NJ 1150 NJ 1150 NJ 1150 NJ 1150 NJ
preplace netloc S00_AXI_1 1 1 7 620 550 NJ 550 NJ 550 NJ 550 1990J 560 NJ 560 2730
preplace netloc S00_AXI_2 1 5 1 1970 320n
preplace netloc S01_AXI_1 1 5 1 2020 340n
preplace netloc axi_interconnect_m_M00_AXI 1 2 1 940 750n
preplace netloc axi_interconnect_m_M01_AXI 1 2 1 930 770n
preplace netloc axi_interconnect_m_M02_AXI 1 2 3 N 790 NJ 790 NJ
preplace netloc axi_interconnect_s_M00_AXI 1 6 1 2330 410n
preplace netloc axi_interconnect_s_ctl_M00_AXI 1 6 1 2350 160n
preplace netloc axi_pcie_0_pcie_7x_mgt 1 7 1 N 650
preplace netloc axi_register_slice_0_M_AXI 1 4 1 1610 610n
preplace netloc aximm_test2_0_m_axi_mm_video 1 3 1 1340 680n
levelinfo -pg 1 -10 410 770 1150 1460 1790 2180 2530 2760
pagesize -pg 1 -db -bbox -sgen -130 0 2870 1220
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_sc7xx()

cr_bd_sc7xx ""
set_property REGISTERED_WITH_MANAGER "1" [get_files sc7xx.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files sc7xx.bd ] 

#call make_wrapper to create wrapper files
if { [get_property IS_LOCKED [ get_files -norecurse [list sc7xx.bd]] ] == 1  } {
  import_files -fileset sources_1 [file normalize "${origin_dir}/sc7xx/sc7xx.gen/sources_1/bd/sc7xx/hdl/sc7xx_wrapper.v" ]
} else {
  set wrapper_path [make_wrapper -fileset sources_1 -files [ get_files -norecurse [list sc7xx.bd]] -top]
  add_files -norecurse -fileset sources_1 $wrapper_path
}


set idrFlowPropertiesConstraints ""
catch {
 set idrFlowPropertiesConstraints [get_param runs.disableIDRFlowPropertyConstraints]
 set_param runs.disableIDRFlowPropertyConstraints 1
}

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7a50tcsg325-2 -flow {Vivado Synthesis 2024} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2024" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "part" -value "xc7a50tcsg325-2" -objects $obj
set_property -name "incremental_checkpoint" -value "$proj_dir/${_xil_proj_name_}.srcs/utils_1/imports/synth_1/sc7xx_bd.dcp" -objects $obj
set_property -name "auto_incremental_checkpoint" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7a50tcsg325-2 -flow {Vivado Implementation 2024} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2024" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "part" -value "xc7a50tcsg325-2" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.bin_file" -value "1" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]
catch {
 if { $idrFlowPropertiesConstraints != {} } {
   set_param runs.disableIDRFlowPropertyConstraints $idrFlowPropertiesConstraints
 }
}

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
